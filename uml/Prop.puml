@startuml
'https://plantuml.com/class-diagram

abstract class AbstractProp{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward()
    + {abstract} applyToAircraft(HeroAircraft heroAircraft):void
 }

class PropBlood{
    - healing:int
    + PropBlood(int healing)
    + applyToAircraft(HeroAircraft heroAircraft):void
}

class PropBullet{
    + PropBullet()
    + applyToAircraft(HeroAircraft heroAircraft):void
}

class PropBulletPlus{
    + PropBulletPlus()
    + applyToAircraft(HeroAircraft heroAircraft):void
}

class PropBomb{
    - observers:List<PropBombObservable>
    + PropBomb()
    + applyToAircraft(HeroAircraft heroAircraft):void
    + register(PropBombObservable observe):void
    + notifyAllObservers():void
}

abstract class PropFactory{
    + PropFactory()
    + {abstract}createProp(EnemyAircraft enemyAircraft): AbstractProp
}

class PropBloodFactory{
    - int healing
    + PropBloodFactory(int healing)
    + createProp(EnemyAircraft enemyAircraft): AbstractProp
}

class PropBulletFactory{
    + PropBulletFactory()
    + createProp(EnemyAircraft enemyAircraft): AbstractProp
}

class PropBulletPlusFactory{
    + PropBulletPlusFactory()
    + createProp(EnemyAircraft enemyAircraft): AbstractProp
}

class PropBombFactory{
    + PropBombFactory()
    + createProp(EnemyAircraft enemyAircraft): AbstractProp
}

AbstractProp <|-- PropBlood
AbstractProp <|-- PropBullet
AbstractProp <|-- PropBomb
AbstractProp <|-- PropBulletPlus
PropFactory <|-- PropBloodFactory
PropFactory <|-- PropBulletFactory
PropFactory <|-- PropBulletPlusFactory
PropFactory <|-- PropBombFactory

PropFactory ..> AbstractProp
PropBloodFactory ..> PropBlood
PropBulletFactory ..> PropBullet
PropBulletPlusFactory ..> PropBulletPlus
PropBombFactory ..> PropBomb





@enduml